<?php

namespace Tests\Feature;

use App\Models\Products;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ProductTest extends TestCase
{
    use RefreshDatabase;

    private User $user;
    private User $admin;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = $this->createUser();
        $this->admin = $this->createUser(isAdmin: true);
    }

    public function test_paginated_products_table_doesnt_contain_11th_record()
    {
        $product = Products::factory(11)->create();
        $lastProduct = $product->last();
        $response = $this->actingAs($this->user)->get('/products');
        $response->assertStatus(200);

        $response->assertViewHas('products', function ($collection) use ($lastProduct){
            return !$collection->contains($lastProduct);
        });
    }

    public function test_admin_can_see_products_create_button()
    {
        $response = $this->actingAs($this->admin)->get('/products');
        $response->assertStatus(200);
        $response->assertSee('Add new product');
    }

    public function test_non_admin_can_not_see_products_create_button()
    {
        $response = $this->actingAs($this->user)->get('/products');
        $response->assertStatus(200);
        $response->assertDontSee('Add new product');
    }

    public function test_admin_can_access_product_create_page()
    {
        $response = $this->actingAs($this->admin)->get('/products/create');
        $response->assertStatus(200);
    }

    public function test_non_admin_can_not_access_product_create_page()
    {
        $response = $this->actingAs($this->user)->get('/products/create');
        $response->assertStatus(403);
    }

    public function test_create_product_successful()
    {
        $product = [
            'name'=> fake()->text(15),
            'price'=> rand(1, 999)
        ];
        $response = $this->actingAs($this->admin)->post('products', $product);
        $response->assertStatus(302);
        $response->assertRedirect('products');
        $this->assertDatabaseHas('products', $product);

        $lastProduct = Products::latest()->first();
        $this->assertEquals($product['name'], $lastProduct->name);
        $this->assertEquals($product['price'], $lastProduct->price);
    }

    public function test_product_edit_contain_correct_values()
    {
        $product = Products::factory()->create();
        $response = $this->actingAs($this->admin)->get('/products/'.$product->id.'/edit');
        $response->assertStatus(200);
        $response->assertSee('value="'.$product->name.'"', false);
        $response->assertSee('value="'.$product->price.'"', false);
        $response->assertViewHas('product', $product);
    }

    public function test_product_update_validation_error_redirects_back_to_form()
    {
        $product = Products::factory()->create();

        $response = $this->actingAs($this->admin)->put('/products/'. $product->id, [
            'name'=> '',
//            'price'=> rand(1, 999)
            'price'=> ''
        ]);

        $response->assertStatus(302);
//        $response->assertSessionHasErrors(['name']);
        $response->assertInvalid(['name', 'price']);
    }

    public function test_product_delete_successful()
    {
        $product = Products::factory()->create();
        $response = $this->actingAs($this->admin)->delete('/products/'. $product->id . '/destroy');

        $response->assertStatus(302);
        $response->assertRedirect();

        $this->assertDatabaseMissing('products', $product->toArray());
        $this->assertDatabaseCount('products', 0);
    }

    public function test_api_returns_products_list()
    {
        $product = Products::factory()->create();
        $response = $this->getJson('/api/v1/products');
        $response->assertJson([$product->toArray()]);
    }

    public function test_api_returns_products_create_successful()
    {
        $product = [
            'name' => 'Product create via api',
            'price'=> 110
        ];

        $response = $this->postJson('/api/v1/products', $product);
        $response->assertStatus(201);
        $response->assertJson($product);
    }

    public function test_api_products_invalid_store_returns_error()
    {
        $product = [
            'name' => 'Product create via api',
            'price'=> ''
        ];

        $response = $this->postJson('/api/v1/products', $product);
        $response->assertStatus(422);
    }



    private function createUser(bool $isAdmin = false): User
    {
        return User::factory()->create([
            'is_admin'=> $isAdmin
        ]);
    }
}
